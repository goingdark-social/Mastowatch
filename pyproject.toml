# --------------------------------------
# Ruff
# --------------------------------------
[tool.ruff]
line-length = 120
target-version = "py312"
extend-exclude = [
  "backend/app/clients/mastodon",  # Auto-generated client code
]

[tool.ruff.lint]
# Core, high-signal rule families
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "I",   # isort
  "B",   # flake8-bugbear
  "UP",  # pyupgrade
]

# Re-enable only the “docstring required” subset; skip the detailed style police.
extend-select = ["D100", "D101", "D102", "D103"]  # require module / class / func docstrings

# Global ignores (keep the two that already existed, plus drop noisy docstring mood/spacing rules)
ignore = [
  "D203",  # 1 blank line required before class docstring (conflicts with D211)
  "D213",  # Multi-line docstring summary should start at second line (conflicts with D212)
  "D401",  # First line should be in imperative mood – stylistic, not critical
]

# --------------------------------------
# Ban manual HTTP libraries project-wide; allow narrow exceptions via per-file-ignores below
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"requests".msg = "Use the generated Mastodon OpenAPI client; no direct HTTP."
"httpx".msg     = "Use the generated Mastodon OpenAPI client; no direct HTTP."
"urllib.request".msg = "Use the generated Mastodon OpenAPI client; no direct HTTP."

[tool.ruff.lint.per-file-ignores]
# Example: allow requests in a generic HTTP adapter if you truly need it (not for Mastodon)
"app/integrations/http_adapter.py" = ["TID251"]