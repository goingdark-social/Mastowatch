name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  python-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check for critical issues only (ignore style and complexity for now)
        flake8 app tests --count --select=E9,F63,F7,F82,F401,E722 --statistics --exit-zero
        
    - name: Format check with black (informational)
      run: |
        black --check --diff app tests || true
        
    - name: Type check with mypy (main modules only)
      run: |
        mypy app/main.py app/config.py app/oauth.py --ignore-missing-imports
        
    - name: Security check with bandit
      run: |
        pip install bandit[toml]
        bandit -r app -f json -o bandit-report.json || true
        bandit -r app --severity medium --exit-zero
        
    - name: Check httpx usage
      run: |
        ./scripts/check-httpx-usage.sh
        
    - name: Run Python tests
      env:
        SKIP_STARTUP_VALIDATION: "1"
      run: |
        python -m unittest discover tests

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        
    - name: Cache Node dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install frontend dependencies and build
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

  build-pr-image:
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'build_pr')
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build Docker image
      run: docker build -t mastowatch-pr:${{ github.event.pull_request.number }} .
