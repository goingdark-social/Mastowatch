name: Update Mastodon API Client

on:
  # Run weekly on Sundays at 2 AM UTC
  schedule:
    - cron: '0 2 * * 0'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.10'

jobs:
  update-api-client:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: true
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install openapi-python-client
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
    
    - name: Check for submodule updates
      id: check_updates
      run: |
        cd specs/mastodon-openapi
        git fetch origin main
        
        CURRENT_COMMIT=$(git rev-parse HEAD)
        LATEST_COMMIT=$(git rev-parse origin/main)
        
        echo "current_commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
        echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
        
        if [ "$CURRENT_COMMIT" != "$LATEST_COMMIT" ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "üìã Submodule updates available"
          echo "Current: $CURRENT_COMMIT"
          echo "Latest:  $LATEST_COMMIT"
        else
          echo "has_updates=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Submodule is up to date"
        fi
    
    - name: Update API client
      if: steps.check_updates.outputs.has_updates == 'true' || github.event.inputs.force_update == 'true'
      run: |
        echo "üîÑ Updating Mastodon API client..."
        
        # Make script executable
        chmod +x scripts/update_mastodon_client.sh
        
        # Run full update
        ./scripts/update_mastodon_client.sh update
        
        echo "‚úÖ Update completed"
    
    - name: Check for changes
      if: steps.check_updates.outputs.has_updates == 'true' || github.event.inputs.force_update == 'true'
      id: check_changes
      run: |
        if git diff --quiet && git diff --cached --quiet; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è No changes detected after update"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "üìù Changes detected:"
          git diff --name-only
          git diff --cached --name-only
        fi
    
    - name: Generate change summary
      if: steps.check_changes.outputs.has_changes == 'true'
      id: changes
      run: |
        cd specs/mastodon-openapi
        
        # Get commit details from submodule
        COMMIT_HASH=$(git rev-parse HEAD)
        COMMIT_DATE=$(git show -s --format=%ci HEAD)
        COMMIT_MESSAGE=$(git show -s --format=%s HEAD)
        COMMIT_AUTHOR=$(git show -s --format=%an HEAD)
        
        # Get API version from schema
        API_VERSION=$(grep -o '"version": *"[^"]*"' ../openapi.json | head -1 | cut -d'"' -f4 || echo "unknown")
        
        # Create summary
        cat << EOF > /tmp/change_summary.md
        ## üîÑ Mastodon API Client Update
        
        **Submodule Update:**
        - **Commit:** $COMMIT_HASH
        - **Date:** $COMMIT_DATE
        - **Author:** $COMMIT_AUTHOR
        - **Message:** $COMMIT_MESSAGE
        
        **API Information:**
        - **Version:** $API_VERSION
        - **Schema Size:** $(du -h ../openapi.json | cut -f1)
        
        **Files Changed:**
        $(cd ../../ && git diff --name-only && git diff --cached --name-only | sed 's/^/- /')
        
        **Client Statistics:**
        - **Python Files:** $(find ../../app/clients/mastodon -name "*.py" | wc -l) generated files
        - **API Endpoints:** $(find ../../app/clients/mastodon/api -name "*.py" | grep -v __init__ | wc -l) endpoints
        
        This update ensures Mastowatch stays current with the latest Mastodon API changes.
        EOF
        
        echo "summary_file=/tmp/change_summary.md" >> $GITHUB_OUTPUT
    
    - name: Create Pull Request
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          chore: update Mastodon API client
          
          - Update mastodon-openapi submodule to ${{ steps.check_updates.outputs.latest_commit }}
          - Regenerate Python client from latest OpenAPI spec
          - API version: $(grep -o '"version": *"[^"]*"' specs/openapi.json | head -1 | cut -d'"' -f4)
        title: "üîÑ Update Mastodon API Client"
        body-path: ${{ steps.changes.outputs.summary_file }}
        branch: chore/update-mastodon-api-client
        delete-branch: true
        labels: |
          dependencies
          automation
          mastodon-api
    
    - name: Auto-approve and merge
      if: steps.check_changes.outputs.has_changes == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Wait a moment for PR to be created
        sleep 5
        
        # Get the PR number
        PR_NUMBER=$(gh pr list --state open --head "chore/update-mastodon-api-client" --json number --jq '.[0].number')
        
        if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
          echo "üîç Found PR #$PR_NUMBER"
          
          # Check if this is a routine update (no breaking changes)
          if ! grep -i "breaking\|major\|security" /tmp/change_summary.md; then
            echo "‚úÖ Auto-approving routine API update"
            gh pr review $PR_NUMBER --approve --body "Auto-approved routine Mastodon API update"
            
            # Merge if all checks pass
            gh pr merge $PR_NUMBER --squash --auto
          else
            echo "‚ö†Ô∏è Manual review required - potential breaking changes detected"
            gh pr comment $PR_NUMBER --body "‚ö†Ô∏è This update may contain breaking changes. Manual review required before merging."
          fi
        else
          echo "‚ùå Could not find PR to auto-approve"
        fi
    
    - name: Report status
      if: always()
      run: |
        echo "## üìä Update Summary"
        echo "- **Submodule has updates:** ${{ steps.check_updates.outputs.has_updates }}"
        echo "- **Force update requested:** ${{ github.event.inputs.force_update }}"
        echo "- **Changes detected:** ${{ steps.check_changes.outputs.has_changes }}"
        
        if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
          echo "‚úÖ Successfully created PR for API client update"
        elif [ "${{ steps.check_updates.outputs.has_updates }}" == "false" ]; then
          echo "‚ÑπÔ∏è No updates available - submodule is current"
        else
          echo "‚ÑπÔ∏è Update completed but no changes detected"
        fi
