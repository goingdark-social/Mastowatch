#!/usr/bin/env bash
set -euo pipefail

cmd="${1:-}"

# Simple check for required tools
check_prerequisites() {
  if ! command -v docker >/dev/null 2>&1; then
    echo "‚ùå Docker is not installed. Please install Docker: https://docs.docker.com/get-docker/"
    exit 1
  fi
  
  if ! docker version >/dev/null 2>&1; then
    echo "‚ùå Docker daemon is not running or not accessible."
    echo "   Try: sudo systemctl start docker"
    echo "   Or: sudo usermod -aG docker $USER && newgrp docker"
    exit 1
  fi
}

setup_local_services() {
  echo "üöÄ Starting development services..."
  
  # Try PostgreSQL locally first
  if command -v postgresql-16 >/dev/null 2>&1 || command -v postgres >/dev/null 2>&1; then
    echo "üìã Found local PostgreSQL. Consider using: sudo systemctl start postgresql"
  fi
  
  # Try simple Docker run without networking issues
  echo "Starting PostgreSQL (simple mode)..."
  if docker run -d --name mastowatch-db-simple \
    -e POSTGRES_DB=mastowatch -e POSTGRES_USER=mastowatch -e POSTGRES_PASSWORD=mastowatch \
    -e POSTGRES_HOST_AUTH_METHOD=trust \
    -p 127.0.0.1:5432:5432 \
    postgres:16 >/dev/null 2>&1; then
    echo "‚úÖ PostgreSQL started"
  else
    echo "‚ö†Ô∏è  Using existing PostgreSQL container or local installation"
  fi
  
  echo "Starting Redis (simple mode)..."
  if docker run -d --name mastowatch-redis-simple \
    -p 127.0.0.1:6379:6379 \
    redis:7 redis-server --appendonly yes >/dev/null 2>&1; then
    echo "‚úÖ Redis started"
  else
    echo "‚ö†Ô∏è  Using existing Redis container or local installation"
  fi
  
  # Give services a moment to start
  sleep 3
  
  # Test connectivity
  echo "Testing database connection..."
  if nc -z 127.0.0.1 5432 2>/dev/null; then
    echo "‚úÖ PostgreSQL is accessible on localhost:5432"
  else
    echo "‚ùå PostgreSQL is not accessible. Check if it's running locally or in Docker."
  fi
  
  if nc -z 127.0.0.1 6379 2>/dev/null; then
    echo "‚úÖ Redis is accessible on localhost:6379"
  else
    echo "‚ùå Redis is not accessible. Check if it's running locally or in Docker."
  fi
}

case "$cmd" in
  up)
    check_prerequisites
    [[ -f .env ]] || cp .env.example .env
    setup_local_services
    echo ""
    echo "‚úÖ Development environment setup complete!"
    echo "   Database: localhost:5432 (mastowatch/mastowatch/mastowatch)"
    echo "   Redis: localhost:6379"
    echo "   To run the API: ./dev api"
    echo "   To run frontend: ./dev frontend"
    ;;
  down)
    echo "üõë Stopping development environment..."
    docker stop mastowatch-db-simple mastowatch-redis-simple 2>/dev/null || true
    docker rm mastowatch-db-simple mastowatch-redis-simple 2>/dev/null || true
    docker stop mastowatch-db mastowatch-redis 2>/dev/null || true
    docker rm mastowatch-db mastowatch-redis 2>/dev/null || true
    echo "‚úÖ Stopped and cleaned up."
    ;;
  api)
    check_prerequisites
    [[ -f .env ]] || cp .env.example .env
    
    echo "üîß Setting up Python environment..."
    if [[ ! -d "venv" ]]; then
      echo "Creating Python virtual environment..."
      if ! python3 -m venv venv; then
        echo "‚ùå Failed to create virtual environment. Try: sudo apt install python3-venv"
        exit 1
      fi
      echo "‚úÖ Created virtual environment"
    fi
    
    if [[ ! -f "venv/bin/activate" ]]; then
      echo "‚ùå Virtual environment is corrupted. Removing and recreating..."
      rm -rf venv
      python3 -m venv venv
    fi
    
    echo "Activating virtual environment..."
    source venv/bin/activate
    
    echo "Installing/updating Python dependencies..."
    pip install -r requirements.txt
    
    echo "Testing database connection..."
    export DATABASE_URL='postgresql+psycopg://mastowatch:mastowatch@localhost:5432/mastowatch'
    export REDIS_URL='redis://localhost:6379/0'
    
    if ! python3 -c "import psycopg; psycopg.connect('$DATABASE_URL')" 2>/dev/null; then
      echo "‚ùå Cannot connect to database. Make sure './dev up' is running successfully."
      exit 1
    fi
    
    echo "Running database migrations..."
    alembic upgrade head
    
    echo "üöÄ Starting API server..."
    echo "   API: http://localhost:8080"
    echo "   Press Ctrl+C to stop"
    uvicorn app.main:app --reload --port 8080
    ;;
  frontend)
    if [[ ! -d "frontend" ]]; then
      echo "‚ùå Frontend directory not found"
      exit 1
    fi
    echo "üé® Starting frontend development server..."
    cd frontend
    if [[ ! -d "node_modules" ]]; then
      echo "üì¶ Installing frontend dependencies..."
      npm install
    fi
    echo "   Frontend: http://localhost:5173"
    echo "   Press Ctrl+C to stop"
    npm run dev
    ;;
  logs)
    echo "üìã Container logs:"
    echo "=== PostgreSQL ==="
    docker logs --tail 10 mastowatch-db-simple 2>/dev/null || docker logs --tail 10 mastowatch-db 2>/dev/null || echo "DB not running"
    echo "=== Redis ==="
    docker logs --tail 10 mastowatch-redis-simple 2>/dev/null || docker logs --tail 10 mastowatch-redis 2>/dev/null || echo "Redis not running"
    ;;
  shell)
    echo "üêö Starting development shell with environment..."
    if [[ ! -f "venv/bin/activate" ]]; then
      echo "‚ùå Virtual environment not found. Run './dev api' first to create it."
      exit 1
    fi
    source venv/bin/activate
    export DATABASE_URL='postgresql+psycopg://mastowatch:mastowatch@localhost:5432/mastowatch'
    export REDIS_URL='redis://localhost:6379/0'
    echo "‚úÖ Environment activated. Database and Redis URLs are set."
    exec bash
    ;;
  *)
    echo "Mastowatch Development Commands:"
    echo "  ./dev up        - Start database services"
    echo "  ./dev down      - Stop and clean up"
    echo "  ./dev api       - Start API server (run after 'up')"
    echo "  ./dev frontend  - Start frontend dev server"
    echo "  ./dev logs      - Show container logs"
    echo "  ./dev shell     - Shell with development environment"
    echo ""
    echo "Typical workflow:"
    echo "  1. ./dev up       # Start databases"
    echo "  2. ./dev api      # Start API (new terminal)"
    echo "  3. ./dev frontend # Start frontend (new terminal)"
    echo ""
    echo "If Docker networking issues persist, consider installing:"
    echo "  sudo apt install postgresql redis-server"
    echo "  sudo systemctl start postgresql redis-server"
    exit 2
    ;;
esac
